{
    "0": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2,  double Mass):\n    x{x0,x1,x2}, fill(0), v{v0,v1,v2}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    unsigned int k;\n    for(auto &body: bodies)\n      for(k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][4];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\n\nstd::array<body,5> N_Body_System::bodies{{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}",
        1161.699,
        21154.26
    ],
    "1": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS(4 * PI * PI);\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n    : x{x0, x1, x2}, fill(0), v{v0, v1, v2}, mass(Mass) {}\n};\n\nclass N_Body_System {\n  static std::array<body, 5> bodies;\n\n  void offset_momentum() {\n    unsigned int k;\n    for (auto &body : bodies)\n      for (k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System() {\n    offset_momentum();\n  }\n\n  // Unroll loops for speed\n  void advance(double dt) {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n    static double r[N][4];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    // Loop unrolling example (partial technique)\n    i = 0;\n    for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n      auto bj = bi;\n      for (++bj; bj != bodies.end(); ++bj, ++i) {\n        for (m = 0; m < 3; ++m) r[i][m] = bi->x[m] - bj->x[m];\n      }\n    }\n\n    for (i = 0; i < N; i += 2) {\n      for (m = 0; m < 3; ++m) {\n        dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n        dx[m] = _mm_loadh_pd(dx[m], &r[i + 1][m]);\n      }\n      dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n      distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n      for (m = 0; m < 2; ++m) {\n        distance = distance * _mm_set1_pd(1.5) - ((_mm_set1_pd(0.5) * dsquared) * distance) * (distance * distance);\n      }\n      dmag = _mm_set1_pd(dt) / dsquared * distance;\n      _mm_store_pd(&mag[i], dmag);\n    }\n\n    i = 0;\n    for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n      auto bj = bi;\n      for (++bj; bj != bodies.end(); ++bj, ++i) {\n        for (m = 0; m < 3; ++m) {\n          const double x = r[i][m] * mag[i];\n          bi->v[m] -= x * bj->mass;\n          bj->v[m] += x * bi->mass;\n        }\n      }\n    }\n\n    for (auto &body : bodies)\n      for (m = 0; m < 3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy() {\n    double e(0.0);\n    for (auto bi = bodies.cbegin(); bi != bodies.cend(); ++bi) {\n      e += bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]) / 2.;\n      auto bj = bi;\n      for (++bj; bj != bodies.end(); ++bj) {\n        double distance = 0;\n        for (auto k = 0; k < 3; ++k) {\n          const double dx = bi->x[k] - bj->x[k];\n          distance += dx * dx;\n        }\n        e -= (bi->mass * bj->mass) / std::sqrt(distance);\n      }\n    }\n    return e;\n  }\n};\n\nstd::array<body, 5> N_Body_System::bodies{{\n  /* sun */\n  body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n  /* jupiter */\n  body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01, 1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n  /* saturn */\n  body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01, -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n  /* uranus */\n  body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01, 2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n  /* neptune */\n  body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01, 2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int, char **argv) {\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i) system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n  return 0;\n}",
        1152.257,
        21039.3
    ],
    "2": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n#include <omp.h>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS(4 * PI * PI);\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n    : x{x0, x1, x2}, v{v0, v1, v2}, mass(Mass) {}\n};\n\nclass N_Body_System {\n  static std::array<body, 5> bodies;\n\n  void offset_momentum() {\n    #pragma omp parallel for\n    for (size_t k = 0; k < 3; ++k) {\n      for (auto &body : bodies)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n    }\n  }\n\npublic:\n  N_Body_System() {\n    offset_momentum();\n  }\n\n  // Optimize advance using parallel loop and efficient cache usage\n  void advance(double dt) {\n    #pragma omp parallel\n    {\n      unsigned int N = bodies.size();\n      double r[3], mag;\n      \n      #pragma omp for schedule(dynamic) collapse(2)\n      for (unsigned int i = 0; i < N; ++i) {\n        for (unsigned int j = i + 1; j < N; ++j) {\n          for (unsigned int m = 0; m < 3; ++m) {\n            r[m] = bodies[i].x[m] - bodies[j].x[m];\n          }\n          double dsquared = r[0] * r[0] + r[1] * r[1] + r[2] * r[2];\n          mag = dt / (dsquared * std::sqrt(dsquared));\n          for (unsigned int m = 0; m < 3; ++m) {\n            double force = r[m] * mag;\n            bodies[i].v[m] -= force * bodies[j].mass;\n            bodies[j].v[m] += force * bodies[i].mass;\n          }\n        }\n      }\n\n      #pragma omp for\n      for (auto &body : bodies)\n        for (size_t m = 0; m < 3; ++m)\n          body.x[m] += dt * body.v[m];\n    }\n  }\n\n  double energy() {\n    double e(0.0);\n    for (auto bi = bodies.cbegin(); bi != bodies.cend(); ++bi) {\n      e += bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]) / 2.;\n      auto bj = bi;\n      for (++bj; bj != bodies.end(); ++bj) {\n        double distance = 0;\n        for (auto k = 0; k < 3; ++k) {\n          const double dx = bi->x[k] - bj->x[k];\n          distance += dx * dx;\n        }\n        e -= (bi->mass * bj->mass) / std::sqrt(distance);\n      }\n    }\n    return e;\n  }\n};\n\nstd::array<body, 5> N_Body_System::bodies{{\n  /* sun */\n  body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n  /* jupiter */\n  body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01, 1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n  /* saturn */\n  body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01, -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n  /* uranus */\n  body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01, 2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n  /* neptune */\n  body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01, 2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int, char **argv) {\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i) system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n  return 0;\n}",
        1805.221,
        33190.86
    ],
    "3": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <omp.h>\n#include <vector>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS(4 * PI * PI);\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct Body {\n    double x[3], v[3], mass;\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n        : x{x0, x1, x2}, v{v0, v1, v2}, mass(Mass) {}\n};\n\nclass NBodySystem {\n    std::vector<Body> bodies;\n\n    void offset_momentum() {\n        double p[3] = {0, 0, 0};\n        for (auto &body : bodies) {\n            for (int i = 0; i < 3; ++i)\n                p[i] += body.v[i] * body.mass;\n        }\n        for (int i = 0; i < 3; ++i)\n            bodies[0].v[i] -= p[i] / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem() : bodies({\n        /* sun */\n        Body(0, 0, 0, 0, 0, 0, SOLAR_MASS),\n        /* jupiter */\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n             -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n        /* saturn */\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n             2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n        /* uranus */\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n             -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n        /* neptune */\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n             -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n        }) {\n        offset_momentum();\n    }\n\n    // Optimize advance using a simplified model for illustration\n    void advance(double dt) {\n        size_t n = bodies.size();\n        std::vector<double> r(3);\n        #pragma omp parallel for schedule(dynamic)\n        for (size_t i = 0; i < n; ++i) {\n            for (size_t j = i + 1; j < n; ++j) {\n                for (int m = 0; m < 3; ++m)\n                    r[m] = bodies[i].x[m] - bodies[j].x[m];\n                double dsquared = r[0] * r[0] + r[1] * r[1] + r[2] * r[2];\n                double distance = std::sqrt(dsquared);\n                double mag = dt / (dsquared * distance);\n                for (int m = 0; m < 3; ++m) {\n                    double force = r[m] * mag;\n                    #pragma omp atomic\n                    bodies[i].v[m] -= force * bodies[j].mass;\n                    #pragma omp atomic\n                    bodies[j].v[m] += force * bodies[i].mass;\n                }\n            }\n        }\n\n        #pragma omp parallel for\n        for (size_t i = 0; i < n; ++i)\n            for (size_t m = 0; m < 3; ++m)\n                bodies[i].x[m] += dt * bodies[i].v[m];\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]) / 2.0;\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double distance = 0;\n                for (int k = 0; k < 3; ++k) {\n                    double dx = bi->x[k] - bj->x[k];\n                    distance += dx * dx;\n                }\n                e -= (bi->mass * bj->mass) / std::sqrt(distance);\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char **argv) {\n    int n = atoi(argv[1]);\n    NBodySystem system;\n    printf(\"%.9f\\n\", system.energy());\n    for (int i = 0; i < n; ++i)\n        system.advance(0.01);\n    printf(\"%.9f\\n\", system.energy());\n    return 0;\n}",
        1936.801,
        34696.54
    ],
    "4": [
        "#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <omp.h>\n#include <vector>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS(4 * PI * PI);\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct Body {\n    double x[3], v[3], mass;\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n        : x{x0, x1, x2}, v{v0, v1, v2}, mass(Mass) {}\n};\n\nclass NBodySystem {\n    std::vector<Body> bodies;\n\n    void offset_momentum() {\n        double p[3] = {0, 0, 0};\n        for (auto &body : bodies) {\n            for (int i = 0; i < 3; ++i)\n                p[i] += body.v[i] * body.mass;\n        }\n        for (int i = 0; i < 3; ++i)\n            bodies[0].v[i] -= p[i] / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem() : bodies({\n        Body(0, 0, 0, 0, 0, 0, SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n             -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n             2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n             -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n             -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n        }) {\n        offset_momentum();\n    }\n\n    void advance(double dt) {\n        size_t n = bodies.size();\n        #pragma omp parallel for schedule(dynamic)\n        for (size_t i = 0; i < n; ++i) {\n            double r[3];\n            for (size_t j = i + 1; j < n; ++j) {\n                for (int m = 0; m < 3; ++m)\n                    r[m] = bodies[i].x[m] - bodies[j].x[m];\n\n                double dsquared = r[0] * r[0] + r[1] * r[1] + r[2] * r[2];\n                double distance = std::sqrt(dsquared);\n                double mag = dt / (dsquared * distance);\n                \n                double force[3];\n                for (int m = 0; m < 3; ++m) {\n                    force[m] = r[m] * mag;\n                    #pragma omp atomic\n                    bodies[i].v[m] -= force[m] * bodies[j].mass;\n                    #pragma omp atomic\n                    bodies[j].v[m] += force[m] * bodies[i].mass;\n                }\n            }\n        }\n\n        #pragma omp parallel for\n        for (size_t i = 0; i < n; ++i) {\n            for (int m = 0; m < 3; ++m)\n                bodies[i].x[m] += dt * bodies[i].v[m];\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]) / 2.0;\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double distance = 0;\n                for (int k = 0; k < 3; ++k) {\n                    double dx = bi->x[k] - bj->x[k];\n                    distance += dx * dx;\n                }\n                e -= (bi->mass * bj->mass) / std::sqrt(distance);\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char **argv) {\n    int n = atoi(argv[1]);\n    NBodySystem system;\n    std::printf(\"%.9f\\n\", system.energy());\n    for (int i = 0; i < n; ++i)\n        system.advance(0.01);\n    std::printf(\"%.9f\\n\", system.energy());\n    return 0;\n}",
        1479.462,
        27122.68
    ],
    "5": [
        "#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <omp.h>\n#include <vector>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS(4 * PI * PI);\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct Body {\n    double x[3], v[3], mass;\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n        : x{x0, x1, x2}, v{v0, v1, v2}, mass(Mass) {}\n};\n\nclass NBodySystem {\n    std::vector<Body> bodies;\n\n    void offset_momentum() {\n        double p[3] = {0, 0, 0};\n        #pragma omp parallel for reduction(+:p[0], p[1], p[2])\n        for (auto &body : bodies) {\n            for (int i = 0; i < 3; ++i)\n                p[i] += body.v[i] * body.mass;\n        }\n        for (int i = 0; i < 3; ++i)\n            bodies[0].v[i] -= p[i] / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem() : bodies({\n        Body(0, 0, 0, 0, 0, 0, SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n             -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n             2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n             -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n             -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n        }) {\n        offset_momentum();\n    }\n\n    void advance(double dt) {\n        size_t n = bodies.size();\n        #pragma omp parallel for schedule(dynamic)\n        for (size_t i = 0; i < n; ++i) {\n            double r[3];\n            for (size_t j = i + 1; j < n; ++j) {\n                for (int m = 0; m < 3; ++m)\n                    r[m] = bodies[i].x[m] - bodies[j].x[m];\n\n                double dsquared = r[0] * r[0] + r[1] * r[1] + r[2] * r[2];\n                double distance = std::sqrt(dsquared);\n                double mag = dt / (dsquared * distance);\n                \n                double force[3];\n                for (int m = 0; m < 3; ++m) {\n                    force[m] = r[m] * mag;\n                    #pragma omp atomic\n                    bodies[i].v[m] -= force[m] * bodies[j].mass;\n                    #pragma omp atomic\n                    bodies[j].v[m] += force[m] * bodies[i].mass;\n                }\n            }\n        }\n\n        #pragma omp parallel for\n        for (size_t i = 0; i < n; ++i) {\n            for (int m = 0; m < 3; ++m)\n                bodies[i].x[m] += dt * bodies[i].v[m];\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]) / 2.0;\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double distance = 0;\n                for (int k = 0; k < 3; ++k) {\n                    double dx = bi->x[k] - bj->x[k];\n                    distance += dx * dx;\n                }\n                e -= (bi->mass * bj->mass) / std::sqrt(distance);\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char **argv) {\n    int n = atoi(argv[1]);\n    NBodySystem system;\n    std::printf(\"%.9f\\n\", system.energy());\n    for (int i = 0; i < n; ++i)\n        system.advance(0.01);\n    std::printf(\"%.9f\\n\", system.energy());\n    return 0;\n}",
        -50970.707,
        26807.18
    ]
}