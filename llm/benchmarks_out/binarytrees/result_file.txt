{
    "0": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n\n\nconst size_t    LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store)\n{\n    Node* root = store.alloc();\n\n    if(d>0){\n        root->l=make(d-1, store);\n        root->r=make(d-1, store);\n    }else{\n        root->l=root->r=0;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth+1;\n\n    // Alloc then dealloc stretchdepth tree\n    {\n        NodePool store;\n        Node *c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node *long_lived_tree = make(max_depth, long_lived_store);\n\n    // buffer to store output of each thread\n    char *outputstr = (char*)malloc(LINE_SIZE * (max_depth +1) * sizeof(char));\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        // Create a memory pool for this thread to use.\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        // each thread write to separate location\n        sprintf(outputstr + LINE_SIZE * d, \"%d\\t trees of depth %d\\t check: %d\\n\",\n           iterations, d, c);\n    }\n\n    // print all results\n    for (int d = min_depth; d <= max_depth; d += 2) \n        printf(\"%s\", outputstr + (d * LINE_SIZE) );\n    free(outputstr);\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        85.493,
        765.614
    ],
    "1": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <vector>\n#include <sstream>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr {\npublic:\n    Apr() {\n        apr_initialize();\n    }\n\n    ~Apr() {\n        apr_terminate();\n    }\n};\n\nstruct Node {\n    Node *l, *r;\n    \n    int check() const {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool {\npublic:\n    NodePool() {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc() {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear() {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store) {\n    Node* root = store.alloc();\n\n    if(d > 0) {\n        root->l = make(d-1, store);\n        root->r = make(d-1, store);\n    } else {\n        root->l = root->r = nullptr;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) {\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2, (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store;\n        Node *c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node *long_lived_tree = make(max_depth, long_lived_store);\n\n    std::vector<std::string> results((max_depth - min_depth)/2 + 1);\n\n    #pragma omp parallel for\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) {\n            Node *a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        std::ostringstream oss;\n        oss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = oss.str();\n    }\n\n    for (const auto &result : results) {\n        std::cout << result;\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << long_lived_tree->check() << \"\\n\";\n\n    return 0;\n}",
        85.518,
        783.898
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <omp.h>\n#include <sstream>\n\nstruct Node {\n    Node *l, *r;\n    int check() const {\n        return !l ? 1 : l->check() + 1 + r->check();\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node*> nodes;\n    ~NodePool() { clear(); }\n    Node* alloc() {\n        nodes.emplace_back(new Node());\n        return nodes.back();\n    }\n    void clear() {\n        for (Node* n : nodes) delete n;\n        nodes.clear();\n    }\n};\n\nNode* make(int d, NodePool &pool) {\n    Node* root = pool.alloc();\n    if (d-- > 0) {\n        root->l = make(d, pool);\n        root->r = make(d, pool);\n    } else {\n        root->l = root->r = nullptr;\n    }\n    return root;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth + 2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool pool;\n        Node *c = make(stretch_depth, pool);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_pool;\n    Node *long_lived_tree = make(max_depth, long_lived_pool);\n\n    std::vector<std::string> results((max_depth - min_depth) / 2 + 1);\n\n    #pragma omp parallel for\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store;\n        for (int i = 0; i < iterations; ++i) {\n            Node* a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n        std::ostringstream oss;\n        oss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = oss.str();\n    }\n\n    for (const auto &result : results) {\n        std::cout << result;\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n\n    return 0;\n}\n",
        650.713,
        5006.4
    ],
    "3": [
        "#include <iostream>\n#include <vector>\n#include <omp.h>\n#include <sstream>\n#include <stack>\n\nstruct Node {\n    Node *l, *r;\n    int check() const {\n        std::stack<const Node*> nodeStack;\n        int count = 0;\n        nodeStack.push(this);\n        while (!nodeStack.empty()) {\n            const Node* node = nodeStack.top();\n            nodeStack.pop();\n            ++count;\n            if (node->l) nodeStack.push(node->l);\n            if (node->r) nodeStack.push(node->r);\n        }\n        return count;\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node*> nodes;\n    ~NodePool() { clear(); }\n    Node* alloc() {\n        if (!nodes.empty()) {\n            Node* node = nodes.back();\n            nodes.pop_back();\n            return node;\n        } else {\n            return new Node();\n        }\n    }\n    void clear() {\n        while (!nodes.empty()) {\n            delete nodes.back();\n            nodes.pop_back();\n        }\n    }\n    void release(Node* node) {\n        nodes.push_back(node);\n    }\n};\n\nNode* iterativeMake(int d, NodePool &pool) {\n    std::stack<std::pair<Node*, int>> nodeStack;\n    Node* root = pool.alloc();\n    nodeStack.push({root, d});\n    while (!nodeStack.empty()) {\n        auto [node, depth] = nodeStack.top();\n        nodeStack.pop();\n        if (depth > 0) {\n            node->l = pool.alloc();\n            node->r = pool.alloc();\n            nodeStack.push({node->r, depth - 1});\n            nodeStack.push({node->l, depth - 1});\n        } else {\n            node->l = node->r = nullptr;\n        }\n    }\n    return root;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth + 2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool pool;\n        Node *c = iterativeMake(stretch_depth, pool);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n        pool.clear();\n    }\n\n    NodePool long_lived_pool;\n    Node *long_lived_tree = iterativeMake(max_depth, long_lived_pool);\n\n    std::vector<std::string> results((max_depth - min_depth) / 2 + 1);\n\n    #pragma omp parallel for\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store;\n        for (int i = 0; i < iterations; ++i) {\n            Node* a = iterativeMake(d, store);\n            c += a->check();\n            store.clear();\n        }\n        std::ostringstream oss;\n        oss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = oss.str();\n    }\n\n    for (const auto &result : results) {\n        std::cout << result;\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n    long_lived_pool.clear();\n\n    return 0;\n}\n",
        1455.953,
        11370.84
    ],
    "4": [
        "#include <iostream>\n#include <vector>\n#include <omp.h>\n#include <sstream>\n\nstruct Node {\n    Node *l, *r;\n    // Recursive check function simplifies stack manipulation\n    int check() const {\n        int count = 1;\n        if (l) count += l->check();\n        if (r) count += r->check();\n        return count;\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node*> nodes;\n    ~NodePool() { clear(); }\n    Node* alloc() {\n        if (!nodes.empty()) {\n            Node* node = nodes.back();\n            nodes.pop_back();\n            return node;\n        } else {\n            return new Node();\n        }\n    }\n    void clear() {\n        while (!nodes.empty()) {\n            delete nodes.back();\n            nodes.pop_back();\n        }\n    }\n    void release(Node* node) {\n        nodes.push_back(node);\n    }\n};\n\n// Recursive node creation\nNode* makeTree(int depth, NodePool &pool) {\n    Node* node = pool.alloc();\n    if (depth > 0) {\n        node->l = makeTree(depth - 1, pool);\n        node->r = makeTree(depth - 1, pool);\n    } else {\n        node->l = node->r = nullptr;\n    }\n    return node;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth + 2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool pool;\n        Node* c = makeTree(stretch_depth, pool);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n        pool.clear();\n    }\n\n    NodePool long_lived_pool;\n    Node *long_lived_tree = makeTree(max_depth, long_lived_pool);\n\n    std::vector<std::string> results((max_depth - min_depth) / 2 + 1);\n\n    #pragma omp parallel for\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store;\n        for (int i = 0; i < iterations; ++i) {\n            Node* a = makeTree(d, store);\n            c += a->check();\n            store.clear();\n        }\n        std::ostringstream oss;\n        oss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = oss.str();\n    }\n\n    for (const auto &result : results) {\n        std::cout << result;\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n    long_lived_pool.clear();\n\n    return 0;\n}",
        817.749,
        7009.228
    ],
    "5": [
        "#include <iostream>\n#include <vector>\n#include <stack>\n#include <omp.h>\n\nstruct Node {\n    Node *l, *r;\n    int check() const {\n        return (l ? l->check() + 1 + r->check() : 1);\n    }\n};\n\nclass NodePool {\n    std::vector<Node*> nodes;\npublic:\n    ~NodePool() { clear(); }\n    Node* alloc() {\n        if (!nodes.empty()) {\n            Node* node = nodes.back();\n            nodes.pop_back();\n            return node;\n        }\n        return new Node();\n    }\n    void clear() {\n        for (auto n : nodes) delete n;\n        nodes.clear();\n    }\n    void release(Node* node) {\n        nodes.push_back(node);\n    }\n};\n\nNode* makeTree(int depth, NodePool &pool) {\n    Node* node = pool.alloc();\n    if (depth > 0) {\n        node->l = makeTree(depth - 1, pool);\n        node->r = makeTree(depth - 1, pool);\n    } else {\n        node->l = node->r = nullptr;\n    }\n    return node;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth + 2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool pool;\n        Node* c = makeTree(stretch_depth, pool);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n        pool.clear();\n    }\n\n    NodePool long_lived_pool;\n    Node *long_lived_tree = makeTree(max_depth, long_lived_pool);\n\n    std::vector<std::string> results((max_depth - min_depth) / 2 + 1);\n\n#pragma omp parallel for\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store;\n        for (int i = 0; i < iterations; ++i) {\n            Node* a = makeTree(d, store);\n            c += a->check();\n            store.clear();\n        }\n        results[(d - min_depth) / 2] = std::to_string(iterations) + \"\\t trees of depth \" + std::to_string(d) + \"\\t check: \" + std::to_string(c) + \"\\n\";\n    }\n\n    for (const auto &result : results) {\n        std::cout << result;\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n    long_lived_pool.clear();\n\n    return 0;\n}",
        798.98,
        6883.484
    ]
}